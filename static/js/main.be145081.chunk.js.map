{"version":3,"sources":["img/covid4.png","img/covid6.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","confirmed","recovered","deaths","lastUpdate","countries","confirmedLt","recoveredLt","deathsLt","getCountryData","bind","this","getData","Axios","get","then","res","data","map","country","name","setState","resApi","resLt","value","e","target","response","status","i","className","fromNow","action","method","type","src","border","title","alt","width","height","onChange","renderCountryOptions","count","effect","Effect","SCALE","covid1","covid2","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be145081.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid4.31f401f7.png\";","module.exports = __webpack_public_path__ + \"static/media/covid6.cddeae99.png\";","import React from 'react';\nimport './App.css';\nimport Axios from \"axios\";\nimport Moment from \"react-moment\";\nimport 'moment/locale/lt';\nimport NotificationBadge from \"react-notification-badge\";\nimport {Effect} from 'react-notification-badge';\nimport covid1 from \"./img/covid4.png\";\nimport covid2 from \"./img/covid6.png\";\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.getCountryData = this.getCountryData.bind(this);\n  }\n\n  state = {\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    lastUpdate: 0,\n    countries: [],\n    confirmedLt: 0,\n    recoveredLt: 0,\n    deathsLt: 0\n  };\n\n  componentDidMount() {\n    this.getData();\n    Axios.get(`https://covid19.mathdro.id/api/countries`)\n      .then(res =>\n        res.data.countries.map(country => ({\n          name: `${country.name}`\n        }))\n      )\n      .then(countries => {\n        this.setState({\n          countries\n        });\n      })\n  }\n\n  async getData() {\n    const resApi = await Axios.get(\"https://covid19.mathdro.id/api\");\n    const resLt  = await Axios.get(\"https://covid19.mathdro.id/api/countries/lt\");\n\n    this.setState({\n      confirmed: resApi.data.confirmed.value,\n      recovered: resApi.data.recovered.value,\n      deaths: resApi.data.deaths.value,\n      lastUpdate: resApi.data.lastUpdate,\n      confirmedLt: resLt.data.confirmed.value,\n      recoveredLt: resLt.data.recovered.value,\n      deathsLt: resLt.data.deaths.value\n    });\n  }\n\n  async getCountryData(e) {\n    if(e.target.value === \"Pasaulyje\"){\n      return this.getData();\n    }\n    try {\n      const res = await Axios.get(`https://covid19.mathdro.id/api/countries/${e.target.value}`);\n      this.setState({\n        confirmed: res.data.confirmed.value,\n        recovered: res.data.recovered.value,\n        deaths: res.data.deaths.value,\n        lastUpdate: res.data.lastUpdate\n      });\n    } catch (error) {\n        if(error.response.status === 404)\n        this.setState({\n          confirmed: \"No data available\",\n          recovered: \"No data available\",\n          deaths: \"No data available\"\n        })\n    }\n  }\n\n  renderCountryOptions() {\n    return this.state.countries.map((country, i) => {\n      return <option>{country.name}</option>\n    })\n  }\n\n  render() { \n    return ( \n      <div className=\"container\"> \n        <h1 className=\"header-text\">Koronovirusas LIVE</h1>\n        <div className=\"update\">\n            <h4>Paskutinis atnaujinimas</h4>\n            <Moment fromNow>{this.state.lastUpdate}</Moment>\n          </div>\n          <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n            <input type=\"hidden\" name=\"cmd\" value=\"_donations\" />\n            <input type=\"hidden\" name=\"business\" value=\"savaleks@gmail.com\" />\n            <input type=\"hidden\" name=\"currency_code\" value=\"EUR\" />\n            <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif\" border=\"0\" name=\"submit\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\n            <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_LT/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n          </form>\n        <div>\n          <select className=\"dropdown\" onChange={this.getCountryData}>\n            <option>Pasaulyje</option>\n            {this.renderCountryOptions()}\n          </select>\n        </div>\n\n        <div className=\"flexbox\">\n          <div className=\"box confirmed\">\n            <h2>Užsikrėtusiųjų skaičius</h2>\n            <h3>{this.state.confirmed}</h3>\n            <NotificationBadge count={this.state.confirmedLt} effect={Effect.SCALE}/>\n          </div>\n          <div className=\"box recovered\">\n          <h2>Išgijusiųju skaičius</h2>\n            <h3>{this.state.recovered}</h3>\n            <NotificationBadge count={this.state.recoveredLt} effect={Effect.SCALE}/>\n          </div>\n          <div className=\"box deaths\">\n          <h2>Mirusiųju skaičius</h2>\n            <h3>{this.state.deaths}</h3>\n            <NotificationBadge count={this.state.deathsLt} effect={Effect.SCALE}/>\n          </div>\n        </div>\n        <div className=\"namelt\">\n          <h3 className=\"lt\">Lietuva</h3>\n        </div>\n        <div>\n        <h2 className=\"simptomai\">Koronaviruso simptomai:</h2>\n          <img className=\"picture1\" src={covid1} alt=\"corona-virus1\"></img>\n          <img className=\"picture2\" src={covid2} alt=\"corona-virus2\"></img>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}